{"version":3,"sources":["actions/index.js","contianners/AddTodo.jsx","components/TodoList.jsx","contianners/VisibleTodoList.jsx","components/Link.jsx","contianners/FilterLink.jsx","components/Footer.jsx","App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","serviceWorker.js","index.js"],"names":["nextTodoId","visibilityFilters","connect","_ref","input","dispatch","react_default","a","createElement","onSubmit","e","text","preventDefault","value","trim","type","id","ref","TodoList","todos","toggleTodo","map","item","key","style","textDecoration","completed","onClick","getVisibleTodos","filter","Error","state","visibilityFilter","Link","active","children","disabled","marginLeft","propsTypes","PropTypes","bool","isRequired","node","func","ownProps","Footer","FilterLink","App","contianners_AddTodo","VisibleTodoList","components_Footer","Component","arguments","length","undefined","action","concat","Object","toConsumableArray","objectSpread","combineReducers","Boolean","window","location","hostname","match","store","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17d1ea53.chunk.js","sourcesContent":["let nextTodoId = 0\r\nexport const addTodo = text => ({\r\n    type: 'ADD_TODO',\r\n    id: nextTodoId++,\r\n    text\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n    type: 'TOGGLE_TODO',\r\n    id\r\n})\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n    type: 'SET_VISIBILITY_FILTER',\r\n    filter\r\n})\r\n\r\nexport const visibilityFilters = {\r\n    SHOW_ALL: 'SHOW_ALL',\r\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../actions/index\";\r\n\r\nconst AddTodo = ({ dispatch }) => {\r\n    let input;\r\n    let submit = e => {\r\n        e.preventDefault();\r\n        if (!input.value.trim()) {\r\n            return;\r\n        }\r\n        dispatch(addTodo(input.value));\r\n        input.value = \"\";\r\n    };\r\n    return (\r\n        <div>\r\n            <form onSubmit={submit}>\r\n                <input ref={e => (input = e)} />\r\n                <button type=\"submit\">addTodo</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect()(AddTodo);\r\n","import React from \"react\";\r\n// import Todo from \"./Todo\";\r\n\r\nconst TodoList = ({ todos, toggleTodo }) => {\r\n    return (\r\n        <ul>\r\n            {todos.map(item => (\r\n                <li\r\n                    key={item.id}\r\n                    style={{\r\n                        textDecoration: item.completed ? \"line-through\" : \"none\"\r\n                    }}\r\n                    onClick={() => toggleTodo(item.id)}\r\n                >\r\n                    {item.text}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import { connect } from \"react-redux\";\r\nimport TodoList from \"../components/TodoList\";\r\nimport { toggleTodo } from \"../actions\";\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n    switch (filter) {\r\n        case \"SHOW_ALL\":\r\n            return todos;\r\n        case \"SHOW_ACTIVE\":\r\n            return todos.filter(item => !item.completed);\r\n        case \"SHOW_COMPLETED\":\r\n            return todos.filter(item => item.completed);\r\n        default:\r\n            throw new Error(\"no such filter\");\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleTodo: id => dispatch(toggleTodo(id))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TodoList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./index.scss\";\r\n\r\nconst Link = ({ active, children, onClick }) => (\r\n    <button onClick={onClick} disabled={active} style={{ marginLeft: \"10px\" }}>\r\n        {children}\r\n    </button>\r\n);\r\n\r\nLink.propsTypes = {\r\n    active: PropTypes.bool.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Link;\r\n","import { connect } from \"react-redux\";\r\nimport { setVisibilityFilter } from \"../actions\";\r\nimport Link from \"../components/Link\";\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    active: ownProps.filter === state.visibilityFilter\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Link);\r\n","import React from \"react\";\r\nimport FilterLink from \"../contianners/FilterLink\";\r\nimport { visibilityFilters } from \"../actions\";\r\n\r\nconst Footer = () => (\r\n    <div>\r\n        <span>Show:</span>\r\n        <FilterLink filter={visibilityFilters.SHOW_ALL}>All</FilterLink>\r\n        <FilterLink filter={visibilityFilters.SHOW_ACTIVE}>aCTIVE</FilterLink>\r\n        <FilterLink filter={visibilityFilters.SHOW_COMPLETED}>\r\n            Completed\r\n        </FilterLink>\r\n    </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport AddTodo from \"./contianners/AddTodo\";\nimport VisibleTodoList from \"./contianners/VisibleTodoList\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <AddTodo />\n                <VisibleTodoList />\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const todos = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            return [\r\n                ...state,\r\n                {\r\n                    text: action.text,\r\n                    id: action.id,\r\n                    completed: false\r\n                }\r\n            ]\r\n        case 'TOGGLE_TODO':\r\n            return state.map(item => (item.id === action.id) ? {\r\n                ...item,\r\n                completed: !item.completed\r\n            } : item)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default todos","const visibilityFilter = (state = 'SHOW_ALL', action) => {\r\n    switch (action.type) {\r\n        case 'SET_VISIBILITY_FILTER':\r\n            return action.filter\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default visibilityFilter","import { combineReducers } from \"redux\";\r\nimport todos from \"./todos\";\r\nimport visibilityFilter from \"./visibilityFilter\";\r\n\r\nexport default combineReducers({\r\n    todos,\r\n    visibilityFilter\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}